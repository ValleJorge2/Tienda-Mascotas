openapi: 3.0.3
info:
  title: E-commerce API
  version: 1.0.0
  description: API de applicacion de mascotas incluye los servicios products, categories, cart, orders, and reviews.

servers:
  - url: /api/v1
    description: API v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          writeOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
    
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          description: User ID
        street_address:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
        is_default:
          type: boolean
    
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
          description: Refresh token
      required:
        - refresh
    
    TokenRefreshResponse:
      type: object
      properties:
        access:
          type: string
          description: New access token
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: integer
          description: Category ID
        created_at:
          type: string
          format: date-time
          readOnly: true
    
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
    
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
          description: Product ID
        quantity:
          type: integer
        price:
          type: number
          format: float
          readOnly: true
    
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
        total:
          type: number
          format: float
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    
    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
          description: Product ID
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true

paths:
  /users/:
    get:
      summary: List all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created successfully

  /users/{id}/:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get user details
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully
    delete:
      summary: Delete a user
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        204:
          description: User deleted successfully

  /addresses/:
    get:
      summary: List all addresses
      tags: [Addresses]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
    post:
      summary: Create a new address
      tags: [Addresses]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        201:
          description: Address created successfully

  /addresses/{id}/:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get address details
      tags: [Addresses]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Address details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    put:
      summary: Update an address
      tags: [Addresses]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        200:
          description: Address updated successfully
    delete:
      summary: Delete an address
      tags: [Addresses]
      security:
        - bearerAuth: []
      responses:
        204:
          description: Address deleted successfully

  /token/refresh/:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
  /products/:
    get:
      summary: List all products
      tags: [Products]
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Product created successfully

  /products/{id}/:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get product details
      tags: [Products]
      responses:
        200:
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update a product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product updated successfully
    delete:
      summary: Delete a product
      tags: [Products]
      responses:
        204:
          description: Product deleted successfully

  /categories/:
    get:
      summary: List all categories
      tags: [Categories]
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Category created successfully

  /cart/items/:
    post:
      summary: Add item to cart
      tags: [Cart]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        201:
          description: Item added to cart successfully

  /cart/items/{id}/:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update cart item
      tags: [Cart]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        200:
          description: Cart item updated successfully
    delete:
      summary: Remove item from cart
      tags: [Cart]
      responses:
        204:
          description: Item removed from cart successfully

  /orders/:
    get:
      summary: List all orders
      tags: [Orders]
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        201:
          description: Order created successfully

  /orders/{id}/cancel/:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Cancel an order
      tags: [Orders]
      responses:
        200:
          description: Order cancelled successfully

  /products/{product_id}/reviews/:
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: List reviews for a product
      tags: [Reviews]
      responses:
        200:
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      summary: Create a review for a product
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        201:
          description: Review created successfully

  /products/{product_id}/reviews/{id}/:
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get review details
      tags: [Reviews]
      responses:
        200:
          description: Review details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    put:
      summary: Update a review
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Review updated successfully
    delete:
      summary: Delete a review
      tags: [Reviews]
      responses:
        204:
          description: Review deleted successfully